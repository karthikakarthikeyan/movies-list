{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-d2bea5dbe4f52ab9f652bd4a44000f98",
            "file": "src/app/store/app.states.ts",
            "type": "interface",
            "sourceCode": "import { createFeatureSelector } from '@ngrx/store';\nimport * as auth from './reducers/auth.reducers';\n\nexport interface AppState {\n  authState: auth.State;\n}\n\n\nexport const reducers = {\n    auth: auth.reducer\n  };\n\n  export const selectAuthState = createFeatureSelector<AppState>('auth');",
            "properties": [
                {
                    "name": "authState",
                    "type": "auth.State",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "AppState",
            "id": "interface-AppState-f6508889f3175d15ceb8f264cd29a6e4-1",
            "file": "src/app/movies/store/app.states.ts",
            "type": "interface",
            "sourceCode": "import * as auth from './../../store/reducers/auth.reducers';\r\nimport { createFeatureSelector } from '@ngrx/store';\r\nimport * as movie from 'src/app/movies/store/movie.reducer';\r\n\r\nexport interface AppState {\r\n  \r\n  authState: auth.State,\r\n  movie:movie.State\r\n}\r\n  export const reducers = {\r\n    auth: auth.reducer,\r\n    movie:movie.movieReducer\r\n  };\r\n\r\n  export const selectAuthState = createFeatureSelector<AppState>('auth');\r\n  export const selectMovieState = createFeatureSelector<AppState>('movie');",
            "properties": [
                {
                    "name": "authState",
                    "type": "auth.State",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "movie",
                    "type": "movie.State",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AppState-1"
        },
        {
            "name": "IMovies",
            "id": "interface-IMovies-eb475756b4fee28bafc05018d07450ed",
            "file": "src/app/movies.ts",
            "type": "interface",
            "sourceCode": "export interface IMovies {\r\n    id:number,\r\n    title: string,\r\n    description:string,\r\n    category: string\r\n}",
            "properties": [
                {
                    "name": "category",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-6141f4394e2e0a59fb8b128690e0a7b4",
            "file": "src/app/movies/store/movie.reducer.ts",
            "type": "interface",
            "sourceCode": "import { Movies } from \"../models/movies\";\r\nimport { LIST_MOVIES, LIST_DATA_SUCCESS,MoviesActions,ADD_MOVIES,UPDATE_MOVIES }  from './movie.action';\r\n\r\n\r\nexport interface State {\r\n  movies: Movies[];\r\n}\r\n\r\nconst initialState: State = {\r\n  movies: []\r\n};\r\n\r\nexport function movieReducer(\r\n  state = initialState,\r\n  action: MoviesActions\r\n)\r\n\r\n{\r\n    \r\n  switch (action.type) {\r\n    \r\n    case LIST_MOVIES:\r\n      return {\r\n        ...state,\r\n        movies: [...state.movies]\r\n      };\r\n      case LIST_DATA_SUCCESS: {\r\n        return {\r\n          movies: action.payload,\r\n          message: null\r\n        };\r\n      }\r\n      case ADD_MOVIES: {\r\n        return {\r\n          ...state\r\n        };\r\n        }\r\n        case UPDATE_MOVIES: {\r\n          return {\r\n            ...state,\r\n          };\r\n        }\r\n     default:\r\n      return state;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "movies",
                    "type": "Movies[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-22f7b0a8a31d007c12219ffae8626f5f-1",
            "file": "src/app/store/reducers/auth.reducers.ts",
            "type": "interface",
            "sourceCode": "import { User } from '../../models/user';\nimport { AuthActionTypes, AuthAction } from '../actions/auth.actions';\n\n\nexport interface State {\n  isAuthenticated: boolean;\n  user: User | null;\n  errorMessage: string | null;\n}\n\nexport const initialState: State = {\n    isAuthenticated: false,\n    user: null,\n    errorMessage: null\n  };\n\n  export function reducer(state = initialState, action: AuthAction): State {\n    switch (action.type) {\n      case AuthActionTypes.LOGIN_SUCCESS: {\n        return {\n          ...state,\n          isAuthenticated: true,\n          user: {\n            token: action.payload.token,\n            email: action.payload.email\n          },\n          errorMessage: null\n        };\n      }\n      case AuthActionTypes.LOGIN_FAILURE: {\n        return {\n          ...state,\n          errorMessage: 'Incorrect email and/or password.'\n        };\n      }\n      case AuthActionTypes.SIGNUP_SUCCESS: {\n        return {\n          ...state,\n          isAuthenticated: true,\n          user: {\n            token: action.payload.token,\n            email: action.payload.email\n          },\n          errorMessage: null\n        };\n      }\n      case AuthActionTypes.LOGOUT: {\n        return initialState;\n      }\n      default: {\n        return state;\n      }\n    }\n  }\n\n  ",
            "properties": [
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "isAuthenticated",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "user",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "State-1"
        },
        {
            "name": "Theme",
            "id": "interface-Theme-ba2397266f787011fba6f565e96104d1",
            "file": "src/app/theme.ts",
            "type": "interface",
            "sourceCode": "export interface Theme {\r\n    name: string;\r\n    properties: any;\r\n  }\r\n  \r\n  export const light: Theme = {\r\n    name: 'light',\r\n    properties: {\r\n      '--background-default': '#ffffff',\r\n      '--primary-default': '#000000',\r\n      '--popup-default': '#000000',\r\n    }\r\n  };\r\n  \r\n  export const dark: Theme = {\r\n    name: 'dark',\r\n    properties: {\r\n      '--background-default': '#000000',\r\n      '--primary-default': '#ffffff',\r\n      '--popup-default': '#000000',\r\n    }\r\n  };\r\n  ",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "properties",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthEffects",
            "id": "injectable-AuthEffects-cd9ad2ab9bbc85cc53b69d20d9f1d7e9",
            "file": "src/app/store/effects/auth.effects.ts",
            "properties": [
                {
                    "name": "LogIn",
                    "defaultValue": "this.actions.pipe(\nofType(AuthActionTypes.LOGIN)).pipe(\n    map((action: LogIn) => action.payload)).pipe(switchMap(payload => {\n    return this.authService.logIn(payload.email, payload.password).pipe(\n        map((user) => {\n        return new LogInSuccess({token: user.token, email: payload.email});\n      })).pipe(catchError((error) => {\n        return of(new LogInFailure({ error: error }));\n      }));\n  }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "LogInFailure",
                    "defaultValue": "this.actions.pipe(\n  ofType(AuthActionTypes.LOGIN_FAILURE)\n)",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "LogInSuccess",
                    "defaultValue": "this.actions.pipe(\n  ofType(AuthActionTypes.LOGIN_SUCCESS),\n  tap((user) => {\n      localStorage.setItem('token', user.payload.token);\n      this.router.navigateByUrl('/movie');\n  })\n)",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "LogOut",
                    "defaultValue": "this.actions.pipe(\n  ofType(AuthActionTypes.LOGOUT),\n  tap((user) => {\n    localStorage.removeItem('token');\n  })\n)",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "SignUp",
                    "defaultValue": "this.actions.pipe(ofType(AuthActionTypes.SIGNUP)).pipe(\n  map((action: SignUp) => action.payload)).pipe(\n  switchMap(payload => {\n    return this.authService.signUp(payload.email, payload.password).pipe(\n      map((user) => {\n        return new SignUpSuccess({token: user.token, email: payload.email});\n      })).pipe(catchError((error) => {\n        return of(new SignUpFailure({ error: error }));\n      }));\n  }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "SignUpSuccess",
                    "defaultValue": "this.actions.pipe(\n  ofType(AuthActionTypes.SIGNUP_SUCCESS),\n  tap((user) => {\n    localStorage.setItem('token', user.payload.token);\n    this.router.navigateByUrl('/movie');\n  })\n)",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { switchMap } from 'rxjs/operators';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable } from 'rxjs';\nimport { tap , map, catchError } from 'rxjs/operators';\nimport {  of } from 'rxjs';\n\nimport { AuthService } from '../../services/auth.service';\n\nimport {\n    AuthActionTypes,\n    LogIn, LogInSuccess , LogInFailure, SignUp , SignUpSuccess , SignUpFailure,\n     LogOut\n  } from '../actions/auth.actions';\n\n//   SignUpFailure\n\n@Injectable()\nexport class AuthEffects {\n\n  constructor(\n    private actions: Actions,\n    private authService: AuthService,\n    private router: Router,\n  ) {}\n\n\n@Effect()\nLogIn: Observable<any> = this.actions.pipe(\nofType(AuthActionTypes.LOGIN)).pipe(\n    map((action: LogIn) => action.payload)).pipe(switchMap(payload => {\n    return this.authService.logIn(payload.email, payload.password).pipe(\n        map((user) => {\n        return new LogInSuccess({token: user.token, email: payload.email});\n      })).pipe(catchError((error) => {\n        return of(new LogInFailure({ error: error }));\n      }));\n  }));\n  \n  @Effect({ dispatch: false })\n  LogInSuccess: Observable<any> = this.actions.pipe(\n  ofType(AuthActionTypes.LOGIN_SUCCESS),\n  tap((user) => {\n      localStorage.setItem('token', user.payload.token);\n      this.router.navigateByUrl('/movie');\n  })\n);\n\n@Effect({ dispatch: false })\nLogInFailure: Observable<any> = this.actions.pipe(\n  ofType(AuthActionTypes.LOGIN_FAILURE)\n); \n\n\n@Effect()\nSignUp: Observable<any> = this.actions.pipe(ofType(AuthActionTypes.SIGNUP)).pipe(\n  map((action: SignUp) => action.payload)).pipe(\n  switchMap(payload => {\n    return this.authService.signUp(payload.email, payload.password).pipe(\n      map((user) => {\n        return new SignUpSuccess({token: user.token, email: payload.email});\n      })).pipe(catchError((error) => {\n        return of(new SignUpFailure({ error: error }));\n      }));\n  }));\n\n\n@Effect({ dispatch: false })\nSignUpSuccess: Observable<any> = this.actions.pipe(\n  ofType(AuthActionTypes.SIGNUP_SUCCESS),\n  tap((user) => {\n    localStorage.setItem('token', user.payload.token);\n    this.router.navigateByUrl('/movie');\n  })\n);\n\n@Effect({ dispatch: false })\npublic LogOut: Observable<any> = this.actions.pipe(\n  ofType(AuthActionTypes.LOGOUT),\n  tap((user) => {\n    localStorage.removeItem('token');\n  })\n);\n};",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions",
                        "type": "Actions"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-62aa53b5a543372fa258a419a0652ce6",
            "file": "src/app/services/auth.service.ts",
            "properties": [
                {
                    "name": "BASE_URL",
                    "defaultValue": "'http://localhost:3000'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getMovies",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IMovies[]>",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15
                },
                {
                    "name": "logIn",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { User } from '../models/user';\nimport { IMovies } from './../movies';\n\n\n@Injectable()\nexport class AuthService {\n  public BASE_URL = 'http://localhost:3000';\n\n  constructor(private http: HttpClient) {}\n\n  getToken(): string {\n    return localStorage.getItem('token');\n  }\n\n  logIn(email: string, password: string): Observable<any> {\n    const url = `${this.BASE_URL}/register`;\n    return this.http.get<User>(url,   {\n      params: {\n        email: email,\n        password: password\n      }});\n  }\n  \n\n  signUp(email: string, password: string): Observable<User> {\n    const url = `${this.BASE_URL}/register`; \n    return this.http.post<User>(url, {email, password});\n  }\n\n  getMovies(): Observable<IMovies[]> {\n    const url = `${this.BASE_URL}/movies`; \n    return this.http.get<IMovies[]>(url);\n\n }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MovieEffects",
            "id": "injectable-MovieEffects-77df2e76b68b2b8283c1cea5505d376a",
            "file": "src/app/movies/store/movie.effects.ts",
            "properties": [
                {
                    "name": "CreateQuotes",
                    "defaultValue": "this.actions.pipe(\r\n                        ofType(ADD_MOVIES),\r\n                        map((action: AddMovie) => action.payload),\r\n                        mergeMap(payload => {\r\n                            return this.movieService.addmovie(payload).pipe(\r\n                                map((data) => {\r\n                                    if (data) {\r\n                                        return new AddMovie(data);\r\n                                    }\r\n                                }));\r\n                        }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "ListMovies",
                    "defaultValue": "this.actions.pipe(\r\n                ofType(LIST_MOVIES),\r\n                map((action: ListMovies) => action),\r\n                mergeMap(payload => {\r\n                    return this.movieService.getAll().pipe(\r\n                        map((data) => new ListDataSucess(data)));\r\n                }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "UpdateQuotes",
                    "defaultValue": "this.actions.pipe(\r\n                                ofType(UPDATE_MOVIES),\r\n                                map((action: UpdateMovies) => action.payload),\r\n                                mergeMap(payload => {\r\n                                    return this.movieService.update(1,payload).pipe(\r\n                                        map((data) => {\r\n                                            if (data) {\r\n                                                return data;\r\n                                            }\r\n                                        }));\r\n                                }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { switchMap, map,  mergeMap } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\nimport { Router } from \"@angular/router\";\r\n\r\nimport { ListDataSucess, LIST_MOVIES, ListMovies,AddMovie, ADD_MOVIES,UpdateMovies,UPDATE_MOVIES } from './movie.action';\r\nimport { Movies } from '../models/movies';\r\nimport { MovieService } from \"../services/movie.service\";\r\n\r\n@Injectable()\r\nexport class MovieEffects {\r\n    constructor(\r\n        private actions: Actions,\r\n        private movieService: MovieService,\r\n        private router: Router\r\n      ) {}\r\n\r\n      @Effect({dispatch: true})\r\n      ListMovies: Observable<any> =  this.actions.pipe(\r\n                ofType(LIST_MOVIES),\r\n                map((action: ListMovies) => action),\r\n                mergeMap(payload => {\r\n                    return this.movieService.getAll().pipe(\r\n                        map((data) => new ListDataSucess(data)));\r\n                }));\r\n\r\n                @Effect({dispatch: true})\r\n                CreateQuotes: Observable<any> =  this.actions.pipe(\r\n                        ofType(ADD_MOVIES),\r\n                        map((action: AddMovie) => action.payload),\r\n                        mergeMap(payload => {\r\n                            return this.movieService.addmovie(payload).pipe(\r\n                                map((data) => {\r\n                                    if (data) {\r\n                                        return new AddMovie(data);\r\n                                    }\r\n                                }));\r\n                        }));\r\n                        \r\n                        @Effect({dispatch: true})\r\n                        UpdateQuotes: Observable<any> =  this.actions.pipe(\r\n                                ofType(UPDATE_MOVIES),\r\n                                map((action: UpdateMovies) => action.payload),\r\n                                mergeMap(payload => {\r\n                                    return this.movieService.update(1,payload).pipe(\r\n                                        map((data) => {\r\n                                            if (data) {\r\n                                                return data;\r\n                                            }\r\n                                        }));\r\n                                }));\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions",
                        "type": "Actions"
                    },
                    {
                        "name": "movieService",
                        "type": "MovieService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "movieService",
                        "type": "MovieService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MovieService",
            "id": "injectable-MovieService-ff6f8db2a8eccb2f161254ee8eaf91bb",
            "file": "src/app/movies/services/movie.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "\"http://localhost:3000\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "httpOptions",
                    "defaultValue": "{\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [
                {
                    "name": "addmovie",
                    "args": [
                        {
                            "name": "movie",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Movies>",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "movie",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 57,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "errorHandler",
                    "args": [
                        {
                            "name": "error",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Movies[]>",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Movies>",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMovies",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Movies[]>",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        },
                        {
                            "name": "movie",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Movies>",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "movie",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { Movies } from \"../models/movies\";\nimport { Observable, throwError } from 'rxjs';\nimport {catchError} from 'rxjs/operators';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MovieService {\n\n  constructor(private http: HttpClient) { }\n\n  baseUrl: string = \"http://localhost:3000\";\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  }\n\n  getMovies(): Observable<Movies[]> {\n    const url = `${this.baseUrl}/movies`; \n    return this.http.get<Movies[]>(url);\n\n }\n\n  getById(id): Observable<Movies> {\n    return this.http.get<Movies>(this.baseUrl + '/movies/' + id)\n    .pipe(\n      catchError(this.errorHandler)\n    )\n  }\n\n  getAll(): Observable<Movies[]> {\n    return this.http.get<Movies[]>(this.baseUrl + '/movies/')\n    .pipe(\n      catchError(this.errorHandler)\n    )\n  }\n\n  addmovie(movie): Observable<Movies> {\n    return this.http.post<Movies>(this.baseUrl + '/movies/', JSON.stringify(movie), this.httpOptions)\n    .pipe(\n      catchError(this.errorHandler)\n    )\n  }  \n\n  update(id, movie): Observable<Movies> {\n    return this.http.put<Movies>(this.baseUrl + '/movies/' + id, JSON.stringify(movie), this.httpOptions)\n    .pipe(\n      catchError(this.errorHandler)\n    )\n  }\n\n  delete(id){\n    return this.http.delete<Movies>(this.baseUrl + '/movies/' + id, this.httpOptions)\n    .pipe(\n      catchError(this.errorHandler)\n    )\n  }\n\n  errorHandler(error) {\n    let errorMessage = '';\n    if(error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    return throwError(errorMessage);\n }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-76788de39c628cbd9b2d0af407ccf98a",
            "file": "src/app/services/theme.service.ts",
            "properties": [
                {
                    "name": "active",
                    "defaultValue": "light",
                    "type": "Theme",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "availableThemes",
                    "defaultValue": "[light, dark]",
                    "type": "Theme[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getActiveTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "Theme",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "getAvailableThemes",
                    "args": [],
                    "optional": false,
                    "returnType": "Theme[]",
                    "typeParameters": [],
                    "line": 12
                },
                {
                    "name": "isDarkTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "setActiveTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "Theme"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "Theme",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDarkTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "setLightTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Theme, light, dark } from '../theme';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ThemeService {\r\n\r\n  constructor() { }\r\n  private active: Theme = light;\r\n  private availableThemes: Theme[] = [light, dark];\r\n\r\n  getAvailableThemes(): Theme[] {\r\n    return this.availableThemes;\r\n  }\r\n\r\n  getActiveTheme(): Theme {\r\n    return this.active;\r\n  }\r\n\r\n  isDarkTheme(): boolean {\r\n    return this.active.name === dark.name;\r\n  }\r\n\r\n  setDarkTheme(): void {\r\n    this.setActiveTheme(dark);\r\n  }\r\n\r\n  setLightTheme(): void {\r\n    this.setActiveTheme(light);\r\n  }\r\n\r\n  setActiveTheme(theme: Theme): void {\r\n    this.active = theme;\r\n\r\n    Object.keys(this.active.properties).forEach(property => {\r\n      document.documentElement.style.setProperty(\r\n        property,\r\n        this.active.properties[property]\r\n      );\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AddMovie",
            "id": "class-AddMovie-b37b55aa5ad5180f6e3b453a7f8e22d0",
            "file": "src/app/movies/store/movie.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport {Movies} from '../models/movies';\r\n\r\n\r\n\r\nexport const LIST_MOVIES = '[Movies] Fetch Movies';\r\nexport const LIST_DATA_SUCCESS='[Movies] List Success';\r\nexport const UPDATE_MOVIES = '[Movies] Update Movies';\r\nexport const ADD_MOVIES = '[Movies] ADD';\r\n\r\n\r\n\r\nexport class ListMovies implements Action {\r\n  readonly type = LIST_MOVIES;\r\n  constructor() {}\r\n}\r\n\r\nexport class UpdateMovies implements Action {\r\n  readonly type = UPDATE_MOVIES;\r\n\r\n  constructor(public payload: { index: number; newMovie: Movies }) {}\r\n}\r\n\r\n  export class ListDataSucess implements Action {\r\n    readonly type = LIST_DATA_SUCCESS;\r\n    constructor(public payload: Movies[]) {}\r\n  }\r\n\r\n  export class AddMovie implements Action {\r\n    readonly type = ADD_MOVIES;\r\n    constructor(public payload: Movies) {\r\n    }\r\n}\r\n\r\n \r\nexport type MoviesActions =\r\n  | ListMovies\r\n  | ListDataSucess\r\n  | UpdateMovies\r\n  | AddMovie;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Movies"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Movies",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Movies",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ADD_MOVIES",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ListDataSucess",
            "id": "class-ListDataSucess-b37b55aa5ad5180f6e3b453a7f8e22d0",
            "file": "src/app/movies/store/movie.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport {Movies} from '../models/movies';\r\n\r\n\r\n\r\nexport const LIST_MOVIES = '[Movies] Fetch Movies';\r\nexport const LIST_DATA_SUCCESS='[Movies] List Success';\r\nexport const UPDATE_MOVIES = '[Movies] Update Movies';\r\nexport const ADD_MOVIES = '[Movies] ADD';\r\n\r\n\r\n\r\nexport class ListMovies implements Action {\r\n  readonly type = LIST_MOVIES;\r\n  constructor() {}\r\n}\r\n\r\nexport class UpdateMovies implements Action {\r\n  readonly type = UPDATE_MOVIES;\r\n\r\n  constructor(public payload: { index: number; newMovie: Movies }) {}\r\n}\r\n\r\n  export class ListDataSucess implements Action {\r\n    readonly type = LIST_DATA_SUCCESS;\r\n    constructor(public payload: Movies[]) {}\r\n  }\r\n\r\n  export class AddMovie implements Action {\r\n    readonly type = ADD_MOVIES;\r\n    constructor(public payload: Movies) {\r\n    }\r\n}\r\n\r\n \r\nexport type MoviesActions =\r\n  | ListMovies\r\n  | ListDataSucess\r\n  | UpdateMovies\r\n  | AddMovie;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Movies[]"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Movies[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Movies[]",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "LIST_DATA_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ListMovies",
            "id": "class-ListMovies-b37b55aa5ad5180f6e3b453a7f8e22d0",
            "file": "src/app/movies/store/movie.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport {Movies} from '../models/movies';\r\n\r\n\r\n\r\nexport const LIST_MOVIES = '[Movies] Fetch Movies';\r\nexport const LIST_DATA_SUCCESS='[Movies] List Success';\r\nexport const UPDATE_MOVIES = '[Movies] Update Movies';\r\nexport const ADD_MOVIES = '[Movies] ADD';\r\n\r\n\r\n\r\nexport class ListMovies implements Action {\r\n  readonly type = LIST_MOVIES;\r\n  constructor() {}\r\n}\r\n\r\nexport class UpdateMovies implements Action {\r\n  readonly type = UPDATE_MOVIES;\r\n\r\n  constructor(public payload: { index: number; newMovie: Movies }) {}\r\n}\r\n\r\n  export class ListDataSucess implements Action {\r\n    readonly type = LIST_DATA_SUCCESS;\r\n    constructor(public payload: Movies[]) {}\r\n  }\r\n\r\n  export class AddMovie implements Action {\r\n    readonly type = ADD_MOVIES;\r\n    constructor(public payload: Movies) {\r\n    }\r\n}\r\n\r\n \r\nexport type MoviesActions =\r\n  | ListMovies\r\n  | ListDataSucess\r\n  | UpdateMovies\r\n  | AddMovie;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "LIST_MOVIES",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogIn",
            "id": "class-LogIn-ed17391503bb01e47349eb290f46cba7",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\n\nexport enum AuthActionTypes {\n  LOGIN = '[Auth] Login',\n  LOGIN_SUCCESS = '[Auth] Login Success',\n  LOGIN_FAILURE  = '[Auth] Login Failure',\n  SIGNUP = '[Auth] Signup',\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\n  LOGOUT = '[Auth] Logout',\n}\n\nexport class LogIn implements Action {\n  readonly type = AuthActionTypes.LOGIN;\n  constructor(public payload: any) {}\n}\n\nexport class LogInSuccess implements Action {\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogInFailure implements Action {\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\n    constructor(public payload: any) {}\n  }\n\n  export class SignUp implements Action {\n    readonly type = AuthActionTypes.SIGNUP;\n    constructor(public payload: any) {}\n  }\n\n  export class SignUpSuccess implements Action {\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\n    constructor(public payload: any) {}\n  }\n\n  export class SignUpFailure implements Action {\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\n    constructor(public payload: any) {}\n  }\n\n  export class LogOut implements Action {\n    readonly type = AuthActionTypes.LOGOUT;\n  }\n  \n  export type AuthAction = LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure| LogOut;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogInFailure",
            "id": "class-LogInFailure-ed17391503bb01e47349eb290f46cba7",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\n\nexport enum AuthActionTypes {\n  LOGIN = '[Auth] Login',\n  LOGIN_SUCCESS = '[Auth] Login Success',\n  LOGIN_FAILURE  = '[Auth] Login Failure',\n  SIGNUP = '[Auth] Signup',\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\n  LOGOUT = '[Auth] Logout',\n}\n\nexport class LogIn implements Action {\n  readonly type = AuthActionTypes.LOGIN;\n  constructor(public payload: any) {}\n}\n\nexport class LogInSuccess implements Action {\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogInFailure implements Action {\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\n    constructor(public payload: any) {}\n  }\n\n  export class SignUp implements Action {\n    readonly type = AuthActionTypes.SIGNUP;\n    constructor(public payload: any) {}\n  }\n\n  export class SignUpSuccess implements Action {\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\n    constructor(public payload: any) {}\n  }\n\n  export class SignUpFailure implements Action {\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\n    constructor(public payload: any) {}\n  }\n\n  export class LogOut implements Action {\n    readonly type = AuthActionTypes.LOGOUT;\n  }\n  \n  export type AuthAction = LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure| LogOut;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogInSuccess",
            "id": "class-LogInSuccess-ed17391503bb01e47349eb290f46cba7",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\n\nexport enum AuthActionTypes {\n  LOGIN = '[Auth] Login',\n  LOGIN_SUCCESS = '[Auth] Login Success',\n  LOGIN_FAILURE  = '[Auth] Login Failure',\n  SIGNUP = '[Auth] Signup',\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\n  LOGOUT = '[Auth] Logout',\n}\n\nexport class LogIn implements Action {\n  readonly type = AuthActionTypes.LOGIN;\n  constructor(public payload: any) {}\n}\n\nexport class LogInSuccess implements Action {\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogInFailure implements Action {\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\n    constructor(public payload: any) {}\n  }\n\n  export class SignUp implements Action {\n    readonly type = AuthActionTypes.SIGNUP;\n    constructor(public payload: any) {}\n  }\n\n  export class SignUpSuccess implements Action {\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\n    constructor(public payload: any) {}\n  }\n\n  export class SignUpFailure implements Action {\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\n    constructor(public payload: any) {}\n  }\n\n  export class LogOut implements Action {\n    readonly type = AuthActionTypes.LOGOUT;\n  }\n  \n  export type AuthAction = LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure| LogOut;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogOut",
            "id": "class-LogOut-ed17391503bb01e47349eb290f46cba7",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\n\nexport enum AuthActionTypes {\n  LOGIN = '[Auth] Login',\n  LOGIN_SUCCESS = '[Auth] Login Success',\n  LOGIN_FAILURE  = '[Auth] Login Failure',\n  SIGNUP = '[Auth] Signup',\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\n  LOGOUT = '[Auth] Logout',\n}\n\nexport class LogIn implements Action {\n  readonly type = AuthActionTypes.LOGIN;\n  constructor(public payload: any) {}\n}\n\nexport class LogInSuccess implements Action {\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogInFailure implements Action {\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\n    constructor(public payload: any) {}\n  }\n\n  export class SignUp implements Action {\n    readonly type = AuthActionTypes.SIGNUP;\n    constructor(public payload: any) {}\n  }\n\n  export class SignUpSuccess implements Action {\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\n    constructor(public payload: any) {}\n  }\n\n  export class SignUpFailure implements Action {\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\n    constructor(public payload: any) {}\n  }\n\n  export class LogOut implements Action {\n    readonly type = AuthActionTypes.LOGOUT;\n  }\n  \n  export type AuthAction = LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure| LogOut;\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGOUT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "Movies",
            "id": "class-Movies-577149a2727c5629629fb85ba971032b",
            "file": "src/app/movies/models/movies.ts",
            "type": "class",
            "sourceCode": "export class Movies {\r\n    id: number;\r\n    title: string;\r\n    description: string;\r\n    Category: string;\r\n  }\r\n  ",
            "properties": [
                {
                    "name": "Category",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SignUp",
            "id": "class-SignUp-ed17391503bb01e47349eb290f46cba7",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\n\nexport enum AuthActionTypes {\n  LOGIN = '[Auth] Login',\n  LOGIN_SUCCESS = '[Auth] Login Success',\n  LOGIN_FAILURE  = '[Auth] Login Failure',\n  SIGNUP = '[Auth] Signup',\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\n  LOGOUT = '[Auth] Logout',\n}\n\nexport class LogIn implements Action {\n  readonly type = AuthActionTypes.LOGIN;\n  constructor(public payload: any) {}\n}\n\nexport class LogInSuccess implements Action {\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogInFailure implements Action {\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\n    constructor(public payload: any) {}\n  }\n\n  export class SignUp implements Action {\n    readonly type = AuthActionTypes.SIGNUP;\n    constructor(public payload: any) {}\n  }\n\n  export class SignUpSuccess implements Action {\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\n    constructor(public payload: any) {}\n  }\n\n  export class SignUpFailure implements Action {\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\n    constructor(public payload: any) {}\n  }\n\n  export class LogOut implements Action {\n    readonly type = AuthActionTypes.LOGOUT;\n  }\n  \n  export type AuthAction = LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure| LogOut;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUpFailure",
            "id": "class-SignUpFailure-ed17391503bb01e47349eb290f46cba7",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\n\nexport enum AuthActionTypes {\n  LOGIN = '[Auth] Login',\n  LOGIN_SUCCESS = '[Auth] Login Success',\n  LOGIN_FAILURE  = '[Auth] Login Failure',\n  SIGNUP = '[Auth] Signup',\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\n  LOGOUT = '[Auth] Logout',\n}\n\nexport class LogIn implements Action {\n  readonly type = AuthActionTypes.LOGIN;\n  constructor(public payload: any) {}\n}\n\nexport class LogInSuccess implements Action {\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogInFailure implements Action {\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\n    constructor(public payload: any) {}\n  }\n\n  export class SignUp implements Action {\n    readonly type = AuthActionTypes.SIGNUP;\n    constructor(public payload: any) {}\n  }\n\n  export class SignUpSuccess implements Action {\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\n    constructor(public payload: any) {}\n  }\n\n  export class SignUpFailure implements Action {\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\n    constructor(public payload: any) {}\n  }\n\n  export class LogOut implements Action {\n    readonly type = AuthActionTypes.LOGOUT;\n  }\n  \n  export type AuthAction = LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure| LogOut;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUpSuccess",
            "id": "class-SignUpSuccess-ed17391503bb01e47349eb290f46cba7",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\n\nexport enum AuthActionTypes {\n  LOGIN = '[Auth] Login',\n  LOGIN_SUCCESS = '[Auth] Login Success',\n  LOGIN_FAILURE  = '[Auth] Login Failure',\n  SIGNUP = '[Auth] Signup',\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\n  LOGOUT = '[Auth] Logout',\n}\n\nexport class LogIn implements Action {\n  readonly type = AuthActionTypes.LOGIN;\n  constructor(public payload: any) {}\n}\n\nexport class LogInSuccess implements Action {\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogInFailure implements Action {\n    readonly type = AuthActionTypes.LOGIN_FAILURE;\n    constructor(public payload: any) {}\n  }\n\n  export class SignUp implements Action {\n    readonly type = AuthActionTypes.SIGNUP;\n    constructor(public payload: any) {}\n  }\n\n  export class SignUpSuccess implements Action {\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\n    constructor(public payload: any) {}\n  }\n\n  export class SignUpFailure implements Action {\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\n    constructor(public payload: any) {}\n  }\n\n  export class LogOut implements Action {\n    readonly type = AuthActionTypes.LOGOUT;\n  }\n  \n  export type AuthAction = LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure| LogOut;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateMovies",
            "id": "class-UpdateMovies-b37b55aa5ad5180f6e3b453a7f8e22d0",
            "file": "src/app/movies/store/movie.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport {Movies} from '../models/movies';\r\n\r\n\r\n\r\nexport const LIST_MOVIES = '[Movies] Fetch Movies';\r\nexport const LIST_DATA_SUCCESS='[Movies] List Success';\r\nexport const UPDATE_MOVIES = '[Movies] Update Movies';\r\nexport const ADD_MOVIES = '[Movies] ADD';\r\n\r\n\r\n\r\nexport class ListMovies implements Action {\r\n  readonly type = LIST_MOVIES;\r\n  constructor() {}\r\n}\r\n\r\nexport class UpdateMovies implements Action {\r\n  readonly type = UPDATE_MOVIES;\r\n\r\n  constructor(public payload: { index: number; newMovie: Movies }) {}\r\n}\r\n\r\n  export class ListDataSucess implements Action {\r\n    readonly type = LIST_DATA_SUCCESS;\r\n    constructor(public payload: Movies[]) {}\r\n  }\r\n\r\n  export class AddMovie implements Action {\r\n    readonly type = ADD_MOVIES;\r\n    constructor(public payload: Movies) {\r\n    }\r\n}\r\n\r\n \r\nexport type MoviesActions =\r\n  | ListMovies\r\n  | ListDataSucess\r\n  | UpdateMovies\r\n  | AddMovie;\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "UPDATE_MOVIES",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "User",
            "id": "class-User-5bbb6892fd1e98e92043004850537983",
            "file": "src/app/models/user.ts",
            "type": "class",
            "sourceCode": "export class User {\n    id?: string;\n    email?: string;\n    password?: string;\n    token?: string;\n  }\n\n  ",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "token",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-0880c31113f5282e4d32d00585cb1940",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "name",
                    "defaultValue": "'Movie'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "title",
                    "defaultValue": "'assignment'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'assignment';\n  name = 'Movie';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".item1 { grid-area: header; }\n\n.grid-container {\n    display: grid;\n    grid-template-areas:\n      'header header header header header header';\n    padding: 10px;\n  }\n  \n  .grid-container > div {\n    text-align: center;\n    padding: 20px 0;\n    font-size: 30px;\n  }\n\n ",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "\n \n<app-header></app-header>\n<div class=\"grid-container\">\n  <div class=\"item1\">\n    <router-outlet></router-outlet>\n  </div>\n</div>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-58d0049f6328b05ff0132f4b04cfef41",
            "file": "src/app/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "isAuthenticated",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "theme",
                    "defaultValue": "'light'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "themeService",
                    "type": "ThemeService",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "changeTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "gotoLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "gotoSignUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "logOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { AppState,selectAuthState } from '../store/app.states';\nimport { Observable } from 'rxjs';\nimport { Store } from '@ngrx/store';\nimport { Router } from '@angular/router';\n\nimport { LogOut } from '../store/actions/auth.actions';\nimport { AuthService } from '../services/auth.service';\nimport { ThemeService } from '../services/theme.service';\n\n\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n  theme = 'light';\n  isAuthenticated: false;\n    user = null;\n\n  getState: Observable<any>;\n\n  constructor(public themeService: ThemeService, private authService: AuthService,private store: Store<AppState>,private router: Router) {\n    this.getState = this.store.select(selectAuthState);\n   }\n\n  ngOnInit() {\n    this.getState.subscribe((state) => {\n      console.log('state.isAuthenticated',state.isAuthenticated);\n      this.isAuthenticated = state.isAuthenticated;\n      this.user = state.user;\n    });\n  }\n\n  public logOut(): void {\n    this.store.dispatch(new LogOut());\n    this.router.navigateByUrl('/');\n  }\n\n  public gotoLogin(): void {\n    this.router.navigateByUrl('log-in');\n  }\n\n  public gotoSignUp(): void {\n    this.router.navigateByUrl('sign-up');\n  }\n\n  changeTheme(){\n    if (this.theme === 'light'){\n      this.themeService.setLightTheme();\n    } else{\n      this.themeService.setDarkTheme();\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n\n\n\n.item1 { grid-area: header; \nbackground-color: black;\n}\na{\n  color: black;\n\n}\n\n.item1 .home {\n    float: center;\n}\n\n\n\n.item1 .login  {\n    float: left;\n    padding-left: 10px;\n}\n\n.item1 .registration  {\n    float: right;\n    padding-right: 5px;\n}\n\n.grid-container {\n  display: grid;\n  grid-template-areas:\n    'header header header header header header';\n  /* grid-gap: 100%; */\n  padding: 10px;\n}\n\n.grid-container > div {\n  background-color:darksalmon;\n  text-align: center;\n  padding: 20px 0;\n  font-size: 30px;\n}\n\n.logoutBtn{\n  float:right;\n  cursor: pointer;\n}\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "themeService",
                        "type": "ThemeService"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!DOCTYPE html>\n<html>\n<head>\n</head>\n<body>\n\n<div class=\"grid-container\">\n  <div class=\"item1\">\n  <div *ngIf=\"isAuthenticated; then doSomething; else doSomethingElse;\"></div>\n    <ng-template #doSomething>\n        \n        <div>\n          <label>Logged User : <em>{{user.email}}!</em></label>\n            <a class=\"logoutBtn\" (click)=\"logOut()\">Log out</a>\n        </div>\n    </ng-template>\n    <ng-template #doSomethingElse>\n      <a class=\"home\" routerLink=\"/movie\">Movie</a>\n      <a class=\"registration\" routerLink=\"/sign-up\">Register</a>\n      <a class=\"login\" routerLink=\"/log-in\">Login</a>   \n    </ng-template>\n  \n</div>\n</div>\n</body>\n</html>\n\n"
        },
        {
            "name": "LandingComponent",
            "id": "component-LandingComponent-b1b9d4bea4a3881d27a15a3f31da2d20",
            "file": "src/app/components/landing/landing.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-landing",
            "styleUrls": [
                "./landing.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./landing.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonName",
                    "defaultValue": "'Update'",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isAuthenticated",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "movies",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "show",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "logOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './../../services/auth.service';\n\nimport { AppState, selectAuthState } from '../../store/app.states';\nimport { LogOut } from '../../store/actions/auth.actions';\n\n@Component({\n  selector: 'app-landing',\n  templateUrl: './landing.component.html',\n  styleUrls: ['./landing.component.scss']\n})\nexport class LandingComponent implements OnInit {\n  public show: boolean = false;\n  public buttonName: any = 'Update';\n  getState: Observable<any>;\n  isAuthenticated: false;\n  user = null;\n  errorMessage = null;\n  public movies: any;\n\n  constructor(\n    private store: Store<AppState>, private authservice: AuthService\n  ) {\n    this.getState = this.store.select(selectAuthState);\n  }\n\n  ngOnInit(): void {\n    this.getState.subscribe((state) => {\n      this.isAuthenticated = state.isAuthenticated;\n      this.user = state.user;\n      this.errorMessage = state.errorMessage;\n    });\n\n    this.authservice.getMovies().subscribe((data) =>\n      {\n        this.movies = data;\n      });\n  }\n\n  logOut(): void {\n    this.store.dispatch(new LogOut());\n  }\n\n  toggle() {\n    this.show = !this.show;\n\n    // CHANGE THE NAME OF THE BUTTON.\n    if (this.show)\n    {\n      this.buttonName = 'Update';\n    }\n    else{\n      this.buttonName = 'Update';\n    }\n  }\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".grid-container {\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    padding: 10px;\r\n    width: 1346px;\r\n  }\r\n  .grid-item {\r\n    border: 1px solid black;\r\n    padding: 10px;\r\n    font-size: 11px; \r\n    width: 650px;\r\n  }\r\n  .buttons{\r\n    float: right;\r\n  }\r\n  .texts{\r\n    text-align: left;\r\n    font-size:12px;\r\n  }\r\n  form {\r\n    display: grid;\r\n    grid-template-columns: 100px 450px;\r\n    grid-gap: 16px;\r\n    float: right;\r\n    font-size: 13px;\r\n}\r\nlabel {\r\n    float: left;\r\n    width: 200px;\r\n    padding-right: 24px;\r\n}\r\n \r\ninput {\r\n    float: left;\r\n    width: calc(100% - 200px);\r\n}\r\n",
                    "styleUrl": "./landing.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "authservice",
                        "type": "AuthService"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authservice",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n   <ul class=\"nav nav-pills\">\n    <li class=\"nav-item\">\n        <a class=\"nav-link\" routerLink=\"/create-movies\" routerLinkActive=\"active\">Create Movies</a>\n      </li>\n  </ul>\n  <a class=\"home\" routerLink=\"/home\">Movies</a>\n\n   <div class=\"grid-container\" *ngFor=\"let item of movies\">\n    <div class=\"grid-item\">\n     <div class=\"texts\">\n      <h6>Title:  {{ item.title }}</h6>\n      <h6>Category: {{ item.category }}</h6>\n      <h6>Description: {{ item.description }}</h6>\n    </div>\n      <div class=\"buttons\">\n        <button (click)=\"toggle()\">    {{buttonName}}\n        </button> &nbsp;\n        <button>Delete</button>\n      </div>\n    </div>\n    <div class=\"grid-item\" *ngIf=\"show\">\n      <ng-container >\n        <form>\n          <label for=\"title\" class=\"title\">Title</label>\n          <input id=\"title\" type=\"text\">\n       \n          <label for=\"category\" class=\"category\">Category</label>\n          <input id=\"category\" type=\"text\">\n    \n          <button style=\"float: right;\">Save</button>\n       \n      </form>\n    </ng-container>\n    </div>\n  </div>\n\n"
        },
        {
            "name": "LogInComponent",
            "id": "component-LogInComponent-aa808ed0f4dcd1262ebcd37823e61b49",
            "file": "src/app/components/log-in/log-in.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-log-in",
            "styleUrls": [
                "./log-in.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./log-in.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "incorrectError",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "theme",
                    "defaultValue": "'light'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "themeService",
                    "type": "ThemeService",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "user",
                    "defaultValue": "new User()",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "changeTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { User } from '../../models/user';\nimport { AppState , selectAuthState } from '../../store/app.states';\nimport { LogIn } from '../../store/actions/auth.actions';\nimport { AuthService } from '../../services/auth.service';\nimport { ThemeService } from '../../services/theme.service';\n\n\n@Component({\n  selector: 'app-log-in',\n  templateUrl: './log-in.component.html',\n  styleUrls: ['./log-in.component.scss']\n})\nexport class LogInComponent implements OnInit {\n  theme = 'light';\n  user: User = new User();\n  getState: Observable<any>;\n  errorMessage: string | null;\n  public incorrectError = false;\n\n\n  constructor(private store: Store<AppState>, private authService: AuthService, public themeService: ThemeService) { \n    this.getState = this.store.select(selectAuthState);\n  }\n\n  ngOnInit() {\n    console.log('111', this.incorrectError);\n    // this.getState.subscribe((state) => {\n    //   this.errorMessage = state.errorMessage;\n    // });\n  };\n\n  onSubmit(): void {\n    const payload = {\n      email: this.user.email,\n      password: this.user.password\n    };\n    this.authService.logIn(this.user.email,this.user.password).subscribe((response) => {\n      if(response.length >= 1){\n        this.store.dispatch(new LogIn(payload));\n      }else{\n        this.incorrectError = true;\n      }\n    });\n  }\n\n  changeTheme(){\n    if (this.theme === 'light'){\n      this.themeService.setLightTheme();\n    } else{\n      this.themeService.setDarkTheme();\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n:root {\n  /* Colors */\n  --background-default: #ffffff;\n  --primary-default: #000000;\n}\n\nbody {\n  background: var(--background-default);\n  color:var(--primary-default);\n  padding: 0;\n  margin: 0;\n  font-size: 16px;\n}\n.login {\n    width: 400px;\n    margin: 16px auto;\n    font-size: 16px;\n  }\n  \n  .login-header,\n  .login p {\n    margin-top: 0;\n    margin-bottom: 0;\n  }\n  \n  .login-header {\n    background:darksalmon;\n    padding: 20px;\n    font-size: 1.4em;\n    font-weight: normal;\n    text-align: center;\n    text-transform: uppercase;\n    color: #fff;\n  }\n  \n  .login-container {\n    background: #ebebeb;\n    padding: 12px;\n  }\n  \n  .login p {\n    padding: 12px;\n  }\n  \n  .login input {\n    box-sizing: border-box;\n    display: block;\n    width: 100%;\n    border-width: 1px;\n    border-style: solid;\n    padding: 16px;\n    outline: 0;\n    font-family: inherit;\n    font-size: 0.95em;\n  }\n  \n  .login input[type=\"email\"],\n  .login input[type=\"password\"] {\n    background: #fff;\n    border-color: #bbb;\n    color: #555;\n  }\n  \n  .login input[type=\"email\"]:focus,\n  .login input[type=\"password\"]:focus {\n    border-color: #888;\n  }\n  \n  .login input[type=\"submit\"] {\n    background:darksalmon;\n    border-color: transparent;\n    color: #fff;\n    cursor: pointer;\n  }\n  \n  .login input[type=\"submit\"]:hover {\n    background:darksalmon;\n  }\n  \n  .login input[type=\"submit\"]:focus {\n    border-color:darksalmon;\n  }",
                    "styleUrl": "./log-in.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "  <html>\n    <body>\n      <div class=\"themes\">\n        <label class=\"radio-inline\">\n        <input type=\"radio\" value=\"light\" name=\"theme\"   [(ngModel)]=\"theme\" (change)=\"changeTheme()\"> Light Theme\n        </label>\n        <label class=\"radio-inline\">\n        <input type=\"radio\" value=\"dark\" name=\"theme\"  [(ngModel)]=\"theme\"  (change)=\"changeTheme()\"> Dark Theme\n        </label>\n      </div>\n      <div class=\"login\">\n        <h2 class=\"login-header\">Log in</h2>\n        <form class=\"login-container\" (ngSubmit)=\"onSubmit()\" ngNativeValidate>\n          <div *ngIf=\"incorrectError\" class=\"login-error\">Username or password is incorrect.</div>\n          <p>\n              <input [(ngModel)]=\"user.email\"\n              name=\"email\"\n              type=\"email\"\n              required\n              id=\"email\"\n              placeholder=\"Email\">\n            </p>\n          <p>\n              <input  [(ngModel)]=\"user.password\"\n              name=\"password\"\n              type=\"password\"\n              required\n              id=\"password\"\n              placeholder=\"Password\"></p>\n          <p><input type=\"submit\" value=\"Log in\"></p>\n        </form>\n        <p>\n            <span>Don't have an account?&nbsp;</span>\n            <a [routerLink]=\"['/sign-up']\">Register</a>\n          </p>\n      </div>\n    \n  </body>\n  </html>\n  "
        },
        {
            "name": "MovieAddComponent",
            "id": "component-MovieAddComponent-16c65ad7840ffd74e06cb2ae2300a229",
            "file": "src/app/movies/components/movie-add/movie-add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-movie-add",
            "styleUrls": [
                "./movie-add.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./movie-add.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fb",
                    "type": "FormBuilder",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "movieForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "movieService",
                    "type": "MovieService",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "submitForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport {MovieService} from '../../services/movie.service';\n\n\n@Component({\n  selector: 'app-movie-add',\n  templateUrl: './movie-add.component.html',\n  styleUrls: ['./movie-add.component.scss']\n})\nexport class MovieAddComponent implements OnInit {\n  movieForm: FormGroup;\n  public submitted = false;\n\n  constructor(public fb: FormBuilder,\n    private router: Router,\n    public movieService: MovieService) { }\n\n  ngOnInit(){\n    this.movieForm = this.fb.group({\n      title: ['',  Validators.required],\n      description: ['',  Validators.required],\n      category: ['',  Validators.required],    \n    })\n  }\n\n  get addFormControl() {\n    return this.movieForm.controls;\n  }\n\n  submitForm() {\n    this.submitted = true;\n    if (this.movieForm.valid) {\n      this.movieService.addmovie(this.movieForm.value).subscribe(res => {\n        this.router.navigateByUrl('/movie');\n    });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".movie-add {\r\n    width: 400px;\r\n    margin: 16px auto;\r\n    font-size: 16px;\r\n    float: left;\r\n  }\r\n  .labels-add{\r\n      float: left;\r\n  }\r\n  .button-add {\r\n    background-color:darksalmon;\r\n    border: none;\r\n    color: white;\r\n    padding: 10px 15px;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n  }",
                    "styleUrl": "./movie-add.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "movieService",
                        "type": "MovieService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "movieService",
                        "type": "MovieService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "addFormControl": {
                    "name": "addFormControl",
                    "getSignature": {
                        "name": "addFormControl",
                        "type": "",
                        "returnType": "",
                        "line": 28
                    }
                }
            },
            "templateData": "<div class=\"movie-add\">\n    <div class=\"add-header\">\n        <h4 style=\"text-align: left;\">Add Movies</h4>\n    </div>\n  \n    <form [formGroup]=\"movieForm\" (ngSubmit)=\"submitForm()\" novalidate>\n        <div class=\"form-group\">\n            <label class=\"labels-add\">Title</label>\n            <input type=\"text\" formControlName=\"title\" class=\"form-control\" maxlength=\"20\" >\n            <span class=\"text-danger\"\n *ngIf=\"(addFormControl.title.touched || submitted) && addFormControl.title.errors?.required\">\n                                Title is required\n                            </span>\n        </div>\n        <div class=\"form-group\">\n            <label class=\"labels-add\">Category</label>\n            <input type=\"text\" formControlName=\"category\" class=\"form-control\">\n            <span class=\"text-danger\"\n            *ngIf=\"(addFormControl.category.touched || submitted) && addFormControl.category.errors?.required\">\n            category is required\n                                       </span>\n        </div>\n        <div class=\"form-group\">\n            <label class=\"labels-add\">Description</label>\n            <textarea class=\"form-control\" formControlName=\"description\" rows=\"3\" maxlength=\"50\"></textarea>\n            <span class=\"text-danger\"\n            *ngIf=\"(addFormControl.description.touched || submitted) && addFormControl.description.errors?.required\">\n            description is required\n        </span>\n        </div>\n        <div class=\"form-group\">\n        <button class=\"button-add\" aria-label=\"Save the Movie\">Submit</button>&nbsp;\n        <a href=\"#\" routerLink=\"/movie\" class=\"button-add\" aria-label=\"Back to Movie Page\">Back</a>\n        </div>\n\n    </form>\n</div>"
        },
        {
            "name": "MovieEditComponent",
            "id": "component-MovieEditComponent-9994c426a07f308c290fa1f5bb162ef2",
            "file": "src/app/movies/components/movie-edit/movie-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-movie-edit",
            "styleUrls": [
                "./movie-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./movie-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "editform",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "fb",
                    "type": "FormBuilder",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "movie",
                    "type": "Movies",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "movieService",
                    "type": "MovieService",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Movies } from '../../models/movies';\nimport { Observable } from 'rxjs';\nimport { Store } from '@ngrx/store';\nimport { AppState, selectMovieState } from 'src/app/movies/store/app.states';\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\nimport {MovieService} from '../../services/movie.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {UpdateMovies, ListMovies} from '../../store/movie.action';\n\n@Component({\n  selector: 'app-movie-edit',\n  templateUrl: './movie-edit.component.html',\n  styleUrls: ['./movie-edit.component.scss']\n})\nexport class MovieEditComponent implements OnInit {\n  id: number;\n  movie: Movies;\n  editform: FormGroup;\n  getState: Observable<any>;\n\n  constructor( public movieService: MovieService, private route: ActivatedRoute, public fb: FormBuilder,\n    private router: Router, private store: Store<AppState>) {\n      this.getState = this.store.select(selectMovieState);\n    }\n\n    ngOnInit(): void {\n      this.id = this.route.snapshot.params['movieId'];\n      this.movieService.getById(this.id).subscribe((data: Movies)=>{\n        this.movie = data;\n      });\n\n      this.editform = this.fb.group({\n        id:[''],\n        title: [''],\n        description: [''],\n        category: [''],\n      })\n\n      this.movieService.getById(this.id)\n      .subscribe( data => {\n        this.editform.setValue(data);\n      });\n  }\n\n  submit(){\n    this.movieService.update(this.id, this.editform.value).subscribe(res => {\n         this.router.navigateByUrl('/movie');\n    })\n\n    // const payload = {\n    //   index: this.id,\n    //   newMovie: this.editform.value\n    // };\n    // this.store.dispatch(new UpdateMovies(payload));\n    // this.store.dispatch(new ListMovies());\n    // this.router.navigateByUrl('/');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".movie-edit {\r\n    width: 400px;\r\n    margin: 16px auto;\r\n    font-size: 16px;\r\n    float: left;\r\n  }\r\n  .labels-edit{\r\n      float: left;\r\n  }\r\n  .button-edit {\r\n    background-color:darksalmon;\r\n    border: none;\r\n    color: white;\r\n    padding: 10px 15px;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n  }",
                    "styleUrl": "./movie-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "movieService",
                        "type": "MovieService"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "movieService",
                        "type": "MovieService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"movie-edit\">\n    <h4 style=\"text-align: left;\">Edit Movie</h4>\n    <form [formGroup]=\"editform\" (ngSubmit)=\"submit()\">\n\n        <div class=\"form-group\">\n            <label class=\"labels-edit\">Title</label>\n            <input type=\"text\"  name=\"title\" id=\"title\" formControlName=\"title\" class=\"form-control\" maxlength=\"20\">\n        </div>\n\n        <div class=\"form-group\">\n            <label class=\"labels-edit\">Category</label>\n            <input type=\"text\" name=\"category\" id=\"category\" formControlName=\"category\" class=\"form-control\">\n        </div>\n\n        <div class=\"form-group\">\n            <label class=\"labels-edit\">Description</label>\n            <textarea class=\"form-control\" name=\"description\" id=\"description\" formControlName=\"description\" rows=\"3\" maxlength=\"50\"></textarea>\n        </div>\n        \n        <button class=\"button-edit\" type=\"submit\" [disabled]=\"!editform.valid\" aria-label=\"Save the Edit Movie\">Update</button>&nbsp;\n        <a href=\"#\" routerLink=\"/movie\" class=\"button-edit\" aria-label=\"Back to Movie Page\">Back</a>\n    </form>\n</div>"
        },
        {
            "name": "MovieListComponent",
            "id": "component-MovieListComponent-f1c2d468492f547c72233caf7014bc78",
            "file": "src/app/movies/components/movie-list/movie-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-movie-list",
            "styleUrls": [
                "./movie-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./movie-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isloggedin",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "movies",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteProduct",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from \"@ngrx/store\";\nimport { Observable } from 'rxjs';\n\nimport { AppState, selectMovieState } from '../../store/app.states';\nimport { ListMovies } from '../../store/movie.action';\nimport { Movies } from \"../../models/movies\";\nimport { MovieService } from \"../../services/movie.service\";\nimport { AuthService } from '../../../services/auth.service';\n\n\n@Component({\n  selector: 'app-movie-list',\n  templateUrl: './movie-list.component.html',\n  styleUrls: ['./movie-list.component.scss']\n})\nexport class MovieListComponent implements OnInit {\n  // movies: Movies[] = [];\n  public movies:any;\n  getState: Observable<any>;\n  errorMessage: string | null;\n  isloggedin = false;\n\n  constructor( private movieService: MovieService,   private store: Store<AppState>, private authService: AuthService\n    ) { \n      this.getState = this.store.select(selectMovieState);\n    }\n\n  ngOnInit() {\n\n    if (this.authService.getToken()) {\n      this.isloggedin = true;\n    }\n    this.movieService.getMovies().subscribe((data) =>\n      {\n        this.movies = data;\n      });\n  }\n\n  deleteProduct(id){\n    this.movieService.delete(id).subscribe(res => {\n         this.movies = this.movies.filter(item => item.id !== id);\n    })\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n.grid-container {\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    // background-color:black;\r\n    padding: 10px;\r\n    width: 1346px;\r\n  }\r\n  .grid-item {\r\n    border: 1px solid black;\r\n    padding: 10px;\r\n    font-size: 11px; \r\n    width: 650px;\r\n  }\r\n  .button {\r\n    background-color:darksalmon;\r\n    border: none;\r\n    color: white;\r\n    padding: 10px 15px;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n  }\r\n  .movies-header{\r\n      float: left;\r\n  }\r\n  .texts{\r\n    text-align: left;\r\n    font-size:12px;\r\n  }\r\n  form {\r\n    display: grid;\r\n    grid-template-columns: 100px 450px;\r\n    grid-gap: 16px;\r\n    float: right;\r\n    font-size: 13px;\r\n}\r\nlabel {\r\n    float: left;\r\n    width: 200px;\r\n    padding-right: 24px;\r\n}\r\n \r\ninput {\r\n    float: left;\r\n    width: calc(100% - 200px);\r\n}\r\n.buttons-crud{\r\n  float: left;\r\n}\r\n\r\n",
                    "styleUrl": "./movie-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "movieService",
                        "type": "MovieService"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "movieService",
                        "type": "MovieService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"movies-header\">    \n  <h5>Lists of  Movies</h5>\n  <button class=\"button\" [routerLink]=\"['/addmovie']\" *ngIf=\"isloggedin\">Add Movies</button>\n\n</div>\n<div class=\"grid-container\" *ngFor=\"let item of movies\">\n  <!-- <h5>Lists of  Movies</h5> -->\n  \n    <div class=\"grid-item\">\n     <div class=\"texts\"> \n      <h6>Title:  {{ item.title }}</h6>\n      <h6>Category:{{ item.category }} </h6>\n      <h6>Description: {{ item.description }}</h6>\n    </div>\n    <div class=\"buttons-crud\"><a href=\"#\" [routerLink]=\"['/editmovie/', item.id]\" class=\"button\" *ngIf=\"isloggedin\">Edit</a>\n&nbsp;<button type=\"button\" (click)=\"deleteProduct(item.id)\" class=\"button\" *ngIf=\"isloggedin\">Delete</button></div>\n    </div>\n    \n  </div>"
        },
        {
            "name": "SignUpComponent",
            "id": "component-SignUpComponent-07ff29c331ee188ce62ba4f6536dbf0b",
            "file": "src/app/components/sign-up/sign-up.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-up",
            "styleUrls": [
                "./sign-up.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-up.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "user",
                    "defaultValue": "new User()",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\n\nimport { User } from '../../models/user';\nimport { AppState, selectAuthState } from '../../store/app.states';\nimport { SignUp } from '../../store/actions/auth.actions';\n\n@Component({\n  selector: 'app-sign-up',\n  templateUrl: './sign-up.component.html',\n  styleUrls: ['./sign-up.component.scss']\n})\nexport class SignUpComponent implements OnInit {\n\n  user: User = new User();\n  getState: Observable<any>;\n  errorMessage: string | null;\n\n  constructor(\n    private store: Store<AppState>\n  ) {\n     this.getState = this.store.select(selectAuthState);\n    }\n\n  ngOnInit() {\n    this.getState.subscribe((state) => {\n      this.errorMessage = state.errorMessage;\n    });\n  }\n  onSubmit(): void {\n    const payload = {\n      email: this.user.email,\n      password: this.user.password\n    };\n    this.store.dispatch(new SignUp(payload));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".login {\n    width: 400px;\n    margin: 16px auto;\n    font-size: 16px;\n  }\n  \n  .login-header,\n  .login p {\n    margin-top: 0;\n    margin-bottom: 0;\n  }\n  \n  .login-header {\n    background: darksalmon;\n    padding: 20px;\n    font-size: 1.4em;\n    font-weight: normal;\n    text-align: center;\n    //text-transform: uppercase;\n    color: #fff;\n  }\n  \n  .login-container {\n    background: #ebebeb;\n    padding: 12px;\n  }\n  \n  .login p {\n    padding: 12px;\n  }\n  \n  .login input {\n    box-sizing: border-box;\n    display: block;\n    width: 100%;\n    border-width: 1px;\n    border-style: solid;\n    padding: 16px;\n    outline: 0;\n    font-family: inherit;\n    font-size: 0.95em;\n  }\n  \n  .login input[type=\"text\"],\n  .login input[type=\"email\"],\n  .login input[type=\"password\"] {\n    background: #fff;\n    border-color: #bbb;\n    color: #555;\n  }\n  \n  .login input[type=\"text\"]:focus,\n  .login input[type=\"email\"]:focus,\n  .login input[type=\"password\"]:focus {\n    border-color: #888;\n  }\n  \n  .login input[type=\"submit\"] {\n    background: darksalmon;\n    border-color: transparent;\n    color: #fff;\n    font-size: 1em;\n    cursor: pointer;\n  }\n  \n  .login input[type=\"submit\"]:hover {\n    background: darksalmon;\n  }\n  \n  .login input[type=\"submit\"]:focus {\n    border-color: darksalmon;\n  }\n\n  .button-signup {\n    background-color:darksalmon;\n    border: none;\n    color: white;\n    padding: 10px 15px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n  }",
                    "styleUrl": "./sign-up.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n      <!-- <div *ngIf=\"errorMessage\">\n        <div class=\"alert alert-danger\" role=\"alert\">\n          {{errorMessage}}\n        </div> -->\n     \n\n\n\n  <div class=\"login\">\n    <h2 class=\"login-header\">Registration</h2>\n    <form class=\"login-container\" (ngSubmit)=\"onSubmit()\" ngNativeValidate>\n      <p>\n          <input \n          [(ngModel)]=\"user.email\"\n            name=\"email\"\n            type=\"email\"\n            required\n            placeholder=\"Email\"\n            class=\"form-control\"\n            id=\"email\">\n        </p>\n      <p>\n          <input [(ngModel)]=\"user.password\"\n          name=\"password\"\n          type=\"password\"\n          required\n          class=\"form-control\"\n          id=\"password\" placeholder=\"Password\"></p>\n      <button type=\"submit\" class=\"button-signup\" tabindex=\"0\" aria-label=\"Save the Registration and redirect to movies\">SignUp</button>&nbsp;\n      <!-- <button type=\"submit\">Submit</button> -->\n      <a [routerLink]=\"['/']\"  class=\"button-signup\">Cancel</a>\n    </form>\n    <p>\n      <span>Already have an account?&nbsp;</span>\n      <a [routerLink]=\"['/log-in']\">Log in!</a>\n    </p>\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "LandingComponent"
                        },
                        {
                            "name": "LogInComponent"
                        },
                        {
                            "name": "MovieAddComponent"
                        },
                        {
                            "name": "MovieEditComponent"
                        },
                        {
                            "name": "MovieListComponent"
                        },
                        {
                            "name": "SignUpComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ADD_MOVIES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/movies/store/movie.action.ts",
                "type": "string",
                "defaultValue": "'[Movies] ADD'"
            },
            {
                "name": "dark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/theme.ts",
                "type": "Theme",
                "defaultValue": "{\r\n    name: 'dark',\r\n    properties: {\r\n      '--background-default': '#000000',\r\n      '--primary-default': '#ffffff',\r\n      '--popup-default': '#000000',\r\n    }\r\n  }"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/log-in/log-in.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/sign-up/sign-up.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Form",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/movies/components/movie-edit/movie-edit.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Form",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/movies/components/movie-add/movie-add.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/movies/store/movie.reducer.ts",
                "type": "State",
                "defaultValue": "{\r\n  movies: []\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/auth.reducers.ts",
                "type": "State",
                "defaultValue": "{\n    isAuthenticated: false,\n    user: null,\n    errorMessage: null\n  }"
            },
            {
                "name": "light",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/theme.ts",
                "type": "Theme",
                "defaultValue": "{\r\n    name: 'light',\r\n    properties: {\r\n      '--background-default': '#ffffff',\r\n      '--primary-default': '#000000',\r\n      '--popup-default': '#000000',\r\n    }\r\n  }"
            },
            {
                "name": "List",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/movies/components/movie-list/movie-list.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LIST_DATA_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/movies/store/movie.action.ts",
                "type": "string",
                "defaultValue": "'[Movies] List Success'"
            },
            {
                "name": "LIST_MOVIES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/movies/store/movie.action.ts",
                "type": "string",
                "defaultValue": "'[Movies] Fetch Movies'"
            },
            {
                "name": "ListOfMoviesAfterLogin",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/landing/landing.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/header/header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.states.ts",
                "type": "object",
                "defaultValue": "{\n    auth: auth.reducer\n  }"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/movies/store/app.states.ts",
                "type": "object",
                "defaultValue": "{\r\n    auth: auth.reducer,\r\n    movie:movie.movieReducer\r\n  }"
            },
            {
                "name": "selectAuthState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.states.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<AppState>('auth')"
            },
            {
                "name": "selectAuthState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/movies/store/app.states.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<AppState>('auth')"
            },
            {
                "name": "selectMovieState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/movies/store/app.states.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<AppState>('movie')"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/header/header.stories.ts",
                "type": "Story<HeaderComponent>",
                "defaultValue": "(args: HeaderComponent) => ({\r\n  component: HeaderComponent,\r\n  template: `<app-header></app-header>`,\r\n  styles: ['./header.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n       HttpClientModule, \r\n      ReactiveFormsModule,\r\n    ],\r\n    declarations: [HeaderComponent],\r\n    providers: [provideMockStore(), AuthService],\r\n  },\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/log-in/log-in.stories.ts",
                "type": "Story<LogInComponent>",
                "defaultValue": "(args: LogInComponent) => ({\r\n  component: LogInComponent,\r\n  template: `<app-log-in></app-log-in>`,\r\n  styles: ['./log-in.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n       HttpClientModule,\r\n      ReactiveFormsModule,\r\n    ],\r\n    declarations: [LogInComponent],\r\n    providers: [provideMockStore(), AuthService],\r\n  },\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/landing/landing.stories.ts",
                "type": "Story<LandingComponent>",
                "defaultValue": "(args: LandingComponent) => ({\r\n  component: LandingComponent,\r\n  template: `<app-landing></app-landing>`,\r\n  styles: ['./landing.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n       HttpClientModule,\r\n      ReactiveFormsModule,\r\n    ],\r\n    declarations: [LandingComponent],\r\n    providers: [provideMockStore(), AuthService],\r\n  },\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/sign-up/sign-up.stories.ts",
                "type": "Story<SignUpComponent>",
                "defaultValue": "(args: SignUpComponent) => ({\r\n  component: SignUpComponent,\r\n  template: `<app-sign-up></app-sign-up>`,\r\n  styles: ['./sign-up.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n       HttpClientModule, \r\n      ReactiveFormsModule,\r\n    ],\r\n    declarations: [SignUpComponent],\r\n    providers: [provideMockStore(),AuthService],\r\n  },\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/movies/components/movie-list/movie-list.stories.ts",
                "type": "Story<MovieListComponent>",
                "defaultValue": "(args: MovieListComponent) => ({\r\n  component: MovieListComponent,\r\n  template: `<app-movie-list></app-movie-list>`,\r\n  styles: ['./movie-list.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n       HttpClientModule,\r\n      ReactiveFormsModule,\r\n    ],\r\n    declarations: [MovieListComponent],\r\n    providers: [provideMockStore(), AuthService],\r\n  },\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/movies/components/movie-edit/movie-edit.stories.ts",
                "type": "Story<MovieEditComponent>",
                "defaultValue": "(args: MovieEditComponent) => ({\r\n  component: MovieEditComponent,\r\n  template: `<app-movie-edit></app-movie-edit>`,\r\n  styles: ['./movie-edit.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n       HttpClientModule,\r\n      ReactiveFormsModule,\r\n    ],\r\n    declarations: [MovieEditComponent],\r\n    providers: [provideMockStore(), MovieService],\r\n  },\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/movies/components/movie-add/movie-add.stories.ts",
                "type": "Story<MovieAddComponent>",
                "defaultValue": "(args: MovieAddComponent) => ({\r\n  component: MovieAddComponent,\r\n  template: `<app-movie-add></app-movie-add>`,\r\n  styles: ['./movie-add.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n       HttpClientModule,\r\n      ReactiveFormsModule,\r\n    ],\r\n    declarations: [MovieAddComponent],\r\n    providers: [provideMockStore(), MovieService],\r\n  },\r\n  props: args,\r\n})"
            },
            {
                "name": "UPDATE_MOVIES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/movies/store/movie.action.ts",
                "type": "string",
                "defaultValue": "'[Movies] Update Movies'"
            }
        ],
        "functions": [
            {
                "name": "movieReducer",
                "file": "src/app/movies/store/movie.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/store/reducers/auth.reducers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AuthAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure | LogOut",
                "file": "src/app/store/actions/auth.actions.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "MoviesActions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ListMovies | ListDataSucess | UpdateMovies | AddMovie",
                "file": "src/app/movies/store/movie.action.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "AuthActionTypes",
                "childs": [
                    {
                        "name": "LOGIN",
                        "value": "[Auth] Login"
                    },
                    {
                        "name": "LOGIN_SUCCESS",
                        "value": "[Auth] Login Success"
                    },
                    {
                        "name": "LOGIN_FAILURE",
                        "value": "[Auth] Login Failure"
                    },
                    {
                        "name": "SIGNUP",
                        "value": "[Auth] Signup"
                    },
                    {
                        "name": "SIGNUP_SUCCESS",
                        "value": "[Auth] Signup Success"
                    },
                    {
                        "name": "SIGNUP_FAILURE",
                        "value": "[Auth] Signup Failure"
                    },
                    {
                        "name": "LOGOUT",
                        "value": "[Auth] Logout"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/actions/auth.actions.ts"
            }
        ],
        "groupedVariables": {
            "src/app/movies/store/movie.action.ts": [
                {
                    "name": "ADD_MOVIES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/movies/store/movie.action.ts",
                    "type": "string",
                    "defaultValue": "'[Movies] ADD'"
                },
                {
                    "name": "LIST_DATA_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/movies/store/movie.action.ts",
                    "type": "string",
                    "defaultValue": "'[Movies] List Success'"
                },
                {
                    "name": "LIST_MOVIES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/movies/store/movie.action.ts",
                    "type": "string",
                    "defaultValue": "'[Movies] Fetch Movies'"
                },
                {
                    "name": "UPDATE_MOVIES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/movies/store/movie.action.ts",
                    "type": "string",
                    "defaultValue": "'[Movies] Update Movies'"
                }
            ],
            "src/app/theme.ts": [
                {
                    "name": "dark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/theme.ts",
                    "type": "Theme",
                    "defaultValue": "{\r\n    name: 'dark',\r\n    properties: {\r\n      '--background-default': '#000000',\r\n      '--primary-default': '#ffffff',\r\n      '--popup-default': '#000000',\r\n    }\r\n  }"
                },
                {
                    "name": "light",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/theme.ts",
                    "type": "Theme",
                    "defaultValue": "{\r\n    name: 'light',\r\n    properties: {\r\n      '--background-default': '#ffffff',\r\n      '--primary-default': '#000000',\r\n      '--popup-default': '#000000',\r\n    }\r\n  }"
                }
            ],
            "src/app/components/log-in/log-in.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/log-in/log-in.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/log-in/log-in.stories.ts",
                    "type": "Story<LogInComponent>",
                    "defaultValue": "(args: LogInComponent) => ({\r\n  component: LogInComponent,\r\n  template: `<app-log-in></app-log-in>`,\r\n  styles: ['./log-in.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n       HttpClientModule,\r\n      ReactiveFormsModule,\r\n    ],\r\n    declarations: [LogInComponent],\r\n    providers: [provideMockStore(), AuthService],\r\n  },\r\n  props: args,\r\n})"
                }
            ],
            "src/app/components/sign-up/sign-up.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/sign-up/sign-up.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/sign-up/sign-up.stories.ts",
                    "type": "Story<SignUpComponent>",
                    "defaultValue": "(args: SignUpComponent) => ({\r\n  component: SignUpComponent,\r\n  template: `<app-sign-up></app-sign-up>`,\r\n  styles: ['./sign-up.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n       HttpClientModule, \r\n      ReactiveFormsModule,\r\n    ],\r\n    declarations: [SignUpComponent],\r\n    providers: [provideMockStore(),AuthService],\r\n  },\r\n  props: args,\r\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/app/movies/components/movie-edit/movie-edit.stories.ts": [
                {
                    "name": "Form",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/movies/components/movie-edit/movie-edit.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/movies/components/movie-edit/movie-edit.stories.ts",
                    "type": "Story<MovieEditComponent>",
                    "defaultValue": "(args: MovieEditComponent) => ({\r\n  component: MovieEditComponent,\r\n  template: `<app-movie-edit></app-movie-edit>`,\r\n  styles: ['./movie-edit.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n       HttpClientModule,\r\n      ReactiveFormsModule,\r\n    ],\r\n    declarations: [MovieEditComponent],\r\n    providers: [provideMockStore(), MovieService],\r\n  },\r\n  props: args,\r\n})"
                }
            ],
            "src/app/movies/components/movie-add/movie-add.stories.ts": [
                {
                    "name": "Form",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/movies/components/movie-add/movie-add.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/movies/components/movie-add/movie-add.stories.ts",
                    "type": "Story<MovieAddComponent>",
                    "defaultValue": "(args: MovieAddComponent) => ({\r\n  component: MovieAddComponent,\r\n  template: `<app-movie-add></app-movie-add>`,\r\n  styles: ['./movie-add.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n       HttpClientModule,\r\n      ReactiveFormsModule,\r\n    ],\r\n    declarations: [MovieAddComponent],\r\n    providers: [provideMockStore(), MovieService],\r\n  },\r\n  props: args,\r\n})"
                }
            ],
            "src/app/movies/store/movie.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/movies/store/movie.reducer.ts",
                    "type": "State",
                    "defaultValue": "{\r\n  movies: []\r\n}"
                }
            ],
            "src/app/store/reducers/auth.reducers.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/auth.reducers.ts",
                    "type": "State",
                    "defaultValue": "{\n    isAuthenticated: false,\n    user: null,\n    errorMessage: null\n  }"
                }
            ],
            "src/app/movies/components/movie-list/movie-list.stories.ts": [
                {
                    "name": "List",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/movies/components/movie-list/movie-list.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/movies/components/movie-list/movie-list.stories.ts",
                    "type": "Story<MovieListComponent>",
                    "defaultValue": "(args: MovieListComponent) => ({\r\n  component: MovieListComponent,\r\n  template: `<app-movie-list></app-movie-list>`,\r\n  styles: ['./movie-list.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n       HttpClientModule,\r\n      ReactiveFormsModule,\r\n    ],\r\n    declarations: [MovieListComponent],\r\n    providers: [provideMockStore(), AuthService],\r\n  },\r\n  props: args,\r\n})"
                }
            ],
            "src/app/components/landing/landing.stories.ts": [
                {
                    "name": "ListOfMoviesAfterLogin",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/landing/landing.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/landing/landing.stories.ts",
                    "type": "Story<LandingComponent>",
                    "defaultValue": "(args: LandingComponent) => ({\r\n  component: LandingComponent,\r\n  template: `<app-landing></app-landing>`,\r\n  styles: ['./landing.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n       HttpClientModule,\r\n      ReactiveFormsModule,\r\n    ],\r\n    declarations: [LandingComponent],\r\n    providers: [provideMockStore(), AuthService],\r\n  },\r\n  props: args,\r\n})"
                }
            ],
            "src/app/header/header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/header/header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/header/header.stories.ts",
                    "type": "Story<HeaderComponent>",
                    "defaultValue": "(args: HeaderComponent) => ({\r\n  component: HeaderComponent,\r\n  template: `<app-header></app-header>`,\r\n  styles: ['./header.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n       HttpClientModule, \r\n      ReactiveFormsModule,\r\n    ],\r\n    declarations: [HeaderComponent],\r\n    providers: [provideMockStore(), AuthService],\r\n  },\r\n  props: args,\r\n})"
                }
            ],
            "src/app/store/app.states.ts": [
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.states.ts",
                    "type": "object",
                    "defaultValue": "{\n    auth: auth.reducer\n  }"
                },
                {
                    "name": "selectAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.states.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AppState>('auth')"
                }
            ],
            "src/app/movies/store/app.states.ts": [
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/movies/store/app.states.ts",
                    "type": "object",
                    "defaultValue": "{\r\n    auth: auth.reducer,\r\n    movie:movie.movieReducer\r\n  }"
                },
                {
                    "name": "selectAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/movies/store/app.states.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AppState>('auth')"
                },
                {
                    "name": "selectMovieState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/movies/store/app.states.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AppState>('movie')"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/movies/store/movie.reducer.ts": [
                {
                    "name": "movieReducer",
                    "file": "src/app/movies/store/movie.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/store/reducers/auth.reducers.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/store/reducers/auth.reducers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/store/actions/auth.actions.ts": [
                {
                    "name": "AuthActionTypes",
                    "childs": [
                        {
                            "name": "LOGIN",
                            "value": "[Auth] Login"
                        },
                        {
                            "name": "LOGIN_SUCCESS",
                            "value": "[Auth] Login Success"
                        },
                        {
                            "name": "LOGIN_FAILURE",
                            "value": "[Auth] Login Failure"
                        },
                        {
                            "name": "SIGNUP",
                            "value": "[Auth] Signup"
                        },
                        {
                            "name": "SIGNUP_SUCCESS",
                            "value": "[Auth] Signup Success"
                        },
                        {
                            "name": "SIGNUP_FAILURE",
                            "value": "[Auth] Signup Failure"
                        },
                        {
                            "name": "LOGOUT",
                            "value": "[Auth] Logout"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/actions/auth.actions.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/store/actions/auth.actions.ts": [
                {
                    "name": "AuthAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure | LogOut",
                    "file": "src/app/store/actions/auth.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/movies/store/movie.action.ts": [
                {
                    "name": "MoviesActions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ListMovies | ListDataSucess | UpdateMovies | AddMovie",
                    "file": "src/app/movies/store/movie.action.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/landing/landing.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LandingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/landing/landing.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ListOfMoviesAfterLogin",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/landing/landing.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/log-in/log-in.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogInComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/log-in/log-in.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/log-in/log-in.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/sign-up/sign-up.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignUpComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/sign-up/sign-up.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/sign-up/sign-up.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/header/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/header/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/user.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/movies.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMovies",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/movies/components/movie-add/movie-add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MovieAddComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/movies/components/movie-add/movie-add.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Form",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/movies/components/movie-add/movie-add.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/movies/components/movie-edit/movie-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MovieEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/movies/components/movie-edit/movie-edit.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Form",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/movies/components/movie-edit/movie-edit.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/movies/components/movie-list/movie-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MovieListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/movies/components/movie-list/movie-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "List",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/movies/components/movie-list/movie-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/movies/models/movies.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Movies",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/movies/services/movie.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MovieService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/movies/store/app.states.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/movies/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/movies/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/movies/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMovieState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/movies/store/movie.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddMovie",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/movies/store/movie.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ListDataSucess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/movies/store/movie.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ListMovies",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/movies/store/movie.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateMovies",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/movies/store/movie.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_MOVIES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/movies/store/movie.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LIST_DATA_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/movies/store/movie.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LIST_MOVIES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/movies/store/movie.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_MOVIES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/movies/store/movie.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MovieEffects",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/movies/store/movie.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/movies/store/movie.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "movieReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/movies/store/movie.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/theme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogIn",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogInFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogInSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogOut",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUp",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUpFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUpSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/auth.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthEffects",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/theme.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Theme",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/theme.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/theme.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "light",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}